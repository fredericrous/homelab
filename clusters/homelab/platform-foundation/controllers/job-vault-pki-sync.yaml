apiVersion: batch/v1
kind: Job
metadata:
  name: vault-pki-sync
  namespace: flux-system
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: vault-pki-sync
        image: hashicorp/vault:1.17.3
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        command:
        - /bin/sh
        - -c
        - |
          set -e

          echo "🔄 Syncing PKI from NAS Vault to cluster Vault..."

          # Wait for cluster Vault to be ready
          echo "⏳ Waiting for cluster Vault..."
          until vault status -address=http://vault-vault.vault.svc.cluster.local:8200; do
            echo "  Waiting for Vault..."
            sleep 5
          done

          # Authenticate to cluster Vault
          export VAULT_ADDR=http://vault-vault.vault.svc.cluster.local:8200
          export VAULT_TOKEN=$(cat /vault/token/token)

          # Check if PKI already exists in cluster Vault
          if vault kv get secret/pki/ca >/dev/null 2>&1; then
            echo "✅ PKI already exists in cluster Vault"
            exit 0
          fi

          # Authenticate to NAS Vault and get PKI
          echo "📥 Fetching PKI from NAS Vault..."
          export NAS_VAULT_ADDR=http://192.168.1.42:61200
          export NAS_VAULT_TOKEN=$(cat /nas-vault/token/token)

          # Get CA certificate and key from NAS Vault
          CA_CERT=$(VAULT_ADDR=$NAS_VAULT_ADDR VAULT_TOKEN=$NAS_VAULT_TOKEN vault kv get -field=ca.crt secret/pki/ca)
          CA_KEY=$(VAULT_ADDR=$NAS_VAULT_ADDR VAULT_TOKEN=$NAS_VAULT_TOKEN vault kv get -field=ca.key secret/pki/ca)

          # Store in cluster Vault
          echo "📤 Storing PKI in cluster Vault..."
          vault kv put secret/pki/ca \
            ca.crt="$CA_CERT" \
            ca.key="$CA_KEY"

          echo "✅ PKI sync complete!"

        volumeMounts:
        - name: vault-token
          mountPath: /vault/token
          readOnly: true
        - name: nas-vault-token
          mountPath: /nas-vault/token
          readOnly: true
        env:
        - name: VAULT_SKIP_VERIFY
          value: "true"
      volumes:
      - name: vault-token
        secret:
          secretName: vault-admin-token
      - name: nas-vault-token
        secret:
          secretName: vault-transit-token
      serviceAccountName: default
