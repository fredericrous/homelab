apiVersion: batch/v1
kind: Job
metadata:
  name: harbor-keys-init
  namespace: harbor
spec:
  ttlSecondsAfterFinished: 300  # Clean up job after 5 minutes
  template:
    spec:
      serviceAccountName: harbor
      restartPolicy: OnFailure
      containers:
      - name: init-keys
        image: alpine/openssl:latest
        command:
        - /bin/sh
        - -c
        - |
          set -e
          
          # Install curl for Vault API calls
          apk add --no-cache curl
          
          # Check if RSA private key already exists in Vault
          echo "Checking if Harbor RSA key exists in Vault..."
          
          # Get Vault token from service account
          VAULT_TOKEN=$(cat /var/run/secrets/vault.io/token)
          VAULT_ADDR="http://vault.vault.svc.cluster.local:8200"
          
          # Check if the secret already exists
          if curl -s -H "X-Vault-Token: $VAULT_TOKEN" \
               -X GET "$VAULT_ADDR/v1/secret/data/harbor/core" | grep -q '"data"'; then
            echo "Harbor core secrets already exist in Vault. Skipping generation."
            exit 0
          fi
          
          echo "Generating new RSA private key for Harbor..."
          
          # Generate RSA private key
          openssl genrsa -out /tmp/private_key.pem 2048
          
          # Read the private key and escape for JSON
          PRIVATE_KEY=$(cat /tmp/private_key.pem | sed ':a;N;$!ba;s/\n/\\n/g')
          
          # Generate a random secret key
          SECRET_KEY=$(openssl rand -base64 32)
          
          # Store in Vault
          echo "Storing keys in Vault..."
          curl -s -H "X-Vault-Token: $VAULT_TOKEN" \
               -H "Content-Type: application/json" \
               -X POST "$VAULT_ADDR/v1/secret/data/harbor/core" \
               -d "{
                 \"data\": {
                   \"private_key.pem\": \"$PRIVATE_KEY\",
                   \"secret_key\": \"$SECRET_KEY\"
                 }
               }"
          
          echo "Harbor core secrets initialized successfully in Vault"
        volumeMounts:
        - name: vault-token
          mountPath: /var/run/secrets/vault.io
          readOnly: true
      volumes:
      - name: vault-token
        projected:
          sources:
          - serviceAccount:
              path: token