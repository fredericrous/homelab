---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-ca-sync
  namespace: istio-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: istio-ca-sync
rules:
  # Read secrets from homelab cluster
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]
    resourceNames: ["cacerts"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: istio-ca-sync
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-ca-sync
subjects:
  - kind: ServiceAccount
    name: istio-ca-sync
    namespace: istio-system
---
apiVersion: batch/v1
kind: Job
metadata:
  name: istio-ca-sync
  namespace: istio-system
spec:
  ttlSecondsAfterFinished: 300
  backoffLimit: 3
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: istio-ca-sync
      restartPolicy: Never
      containers:
        - name: ca-sync
          image: alpine/k8s:1.29.11
          command: ["/bin/sh", "-c"]
          args:
            - |
              set -euo pipefail

              # Log helper
              log() {
                echo "$(date -u +%Y-%m-%dT%H:%M:%SZ) - $1"
              }

              log "Syncing Istio CA from homelab cluster to NAS"
              
              # Wait for the homelab CA to be available via cross-cluster connectivity
              # This assumes the clusters can communicate (e.g., via NodePort or LoadBalancer)
              HOMELAB_ENDPOINT="${HOMELAB_ENDPOINT:-192.168.1.68:6443}"
              
              log "Connecting to homelab cluster at $HOMELAB_ENDPOINT"
              
              # Note: In production, you'd need proper kubeconfig or service account token
              # For now, we'll create a placeholder that should be replaced with actual sync mechanism
              
              log "Checking for cacerts secret synced by homelab"
              
              # Check if secret already exists
              if kubectl get secret cacerts -n istio-system >/dev/null 2>&1; then
                log "cacerts secret found in NAS cluster"
                
                # Verify it has the sync annotation
                SYNC_FROM=$(kubectl get secret cacerts -n istio-system \
                  -o jsonpath='{.metadata.annotations.istio\.io/synced-from}' 2>/dev/null || echo "")
                
                if [ "$SYNC_FROM" = "homelab" ]; then
                  log "CA was synced from homelab cluster"
                  FINGERPRINT=$(kubectl get secret cacerts -n istio-system \
                    -o jsonpath='{.metadata.annotations.istio\.io/ca-fingerprint}' 2>/dev/null || echo "unknown")
                  log "CA fingerprint: $FINGERPRINT"
                  exit 0
                else
                  log "WARN: cacerts exists but wasn't synced from homelab"
                  log "This may be a manually created secret"
                fi
              else
                log "WARN: cacerts secret not found"
                log "Waiting for homelab cluster to sync the CA..."
                log "The istio-ca-sync-to-nas job in homelab will create this secret"
                exit 1
              fi
