version: '3'

vars:
  ROOT_DIR: '..'
  KUBECONFIG: '{{.ROOT_DIR}}/kubeconfig'
  TALOSCONFIG: '{{.ROOT_DIR}}/talosconfig'

env:
  SHELL: /bin/bash
  KUBECONFIG: '{{.KUBECONFIG}}'
  TALOSCONFIG: '{{.TALOSCONFIG}}'

tasks:
  up:
    desc: Create cluster infrastructure (VMs + Talos, ready for CNI)
    deps: [check-prereq]
    cmds:
      - task: init
      - task: provision
      - task: configure
      - task: kubeconfig
      - echo "✅ Cluster infrastructure ready. Use 'bootstrap homelab install-cilium' to install CNI."

  init:
    desc: Initialize Terraform
    deps: [check-prereq]
    cmds:
      - terraform init -upgrade

  provision:
    desc: "Provision VMs on Proxmox"
    deps: [check-prereq]
    cmds:
      - echo "Creating VMs..."
      - terraform apply -target=module.vms -auto-approve

  configure:
    desc: "Configure Talos on VMs"
    deps: [check-prereq]
    cmds:
      - echo "Waiting for VMs to get IP addresses..."
      - |-
        # Extract IPs from terraform output
        VM_IPS=($(terraform output -json | jq -r '.talos_client_configuration.value.nodes[]'))
        ../bootstrap/scripts/homelab/wait-vms-ready.sh "${VM_IPS[@]}"
      - terraform apply -var="configure_talos=true" -auto-approve

  kubeconfig:
    desc: "Wait for kubeconfig to be generated by terraform"
    deps: [check-prereq]
    cmds:
      - |-
        echo "⏳ Waiting for terraform to generate kubeconfig..."
        for i in $(seq 1 60); do
          if [ -f "{{.KUBECONFIG}}" ]; then
            echo "✅ Kubeconfig generated by terraform"
            break
          fi
          echo "  Waiting for kubeconfig file... ($i/60)"
          sleep 5
        done
        if [ ! -f "{{.KUBECONFIG}}" ]; then
          echo "❌ Kubeconfig not generated by terraform"
          exit 1
        fi
      - echo "⏳ Waiting for Kubernetes API to be ready..."
      - |-
        for i in {1..60}; do
          if kubectl version --short &>/dev/null; then
            echo "✅ Kubernetes API is ready"
            break
          fi
          echo "  Waiting for API server... ($i/60)"
          sleep 5
        done
      - echo "⏳ Waiting for all nodes to be ready..."
      - kubectl wait --for=condition=Ready nodes --all --timeout=5m

  validate-cluster:
    desc: "Validate cluster is ready"
    deps: [check-prereq]
    preconditions:
      - sh: kubectl get nodes
        msg: "Cluster must be accessible"
    cmds:
      - echo "🔍 Validating cluster..."
      - kubectl get nodes
      - kubectl get pods -A
      - |-
        echo "⏳ Waiting for all system pods to be ready..."
        kubectl wait --for=condition=Ready pods --all -n kube-system --timeout=5m
      - echo "✅ Cluster validation completed"

  status:
    desc: "Show cluster infrastructure status"
    cmds:
      - echo "📊 Homelab Infrastructure Status"
      - echo "==============================="
      - |-
        if [ -f "{{.KUBECONFIG}}" ]; then
          echo "✅ Kubeconfig: {{.KUBECONFIG}}"
          if kubectl version --short &>/dev/null; then
            echo "✅ API Server: Accessible"
            echo ""
            echo "Nodes:"
            kubectl get nodes
            echo ""
            echo "ℹ️  For full cluster status including CNI/GitOps: bootstrap homelab status"
          else
            echo "❌ API Server: Not accessible"
          fi
        else
          echo "❌ Kubeconfig: Not found"
        fi

  uninstall:
    desc: "Destroy infrastructure (VMs)"
    deps: [check-prereq]
    prompt: "This will destroy all cluster resources. Are you sure?"
    cmds:
      - echo "🗑️ Destroying infrastructure..."
      - terraform destroy -auto-approve
      - |-
        echo "🧹 Cleaning up generated files..."
        rm -f {{.KUBECONFIG}} {{.TALOSCONFIG}}

  check-prereq:
    desc: Check prerequisites
    silent: true
    cmds:
      - |-
        if ! command -v terraform &> /dev/null; then
          echo "ERROR: terraform is required but not installed. Install with: brew install terraform"
          exit 1
        fi
      - |-
        if ! command -v yq &> /dev/null; then
          echo "ERROR: yq is required but not installed. Install with: brew install yq"
          exit 1
        fi
      - |-
        if [ ! -f "{{.ROOT_DIR}}/.env" ]; then
          echo "ERROR: .env file not found. Copy .env.example and update with your values"
          exit 1
        fi
      - |-
        if ! test -f terraform.tfvars; then
          echo "ERROR: terraform.tfvars not found. Copy terraform.tfvars.example and update with your values"
          exit 1
        fi