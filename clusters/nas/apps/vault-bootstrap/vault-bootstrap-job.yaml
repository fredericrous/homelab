apiVersion: batch/v1
kind: Job
metadata:
  name: vault-bootstrap
  namespace: vault
spec:
  backoffLimit: 3
  template:
    spec:
      restartPolicy: OnFailure
      containers:
        - name: bootstrap
          image: alpine:3.20
          command: ["/bin/sh", "-ec"]
          args:
            - |
              set -euo pipefail
              
              # Fix permissions first
              echo "🔧 Fixing permissions on vault directory..."
              chown -R 100:1000 /share/VMs/kubernetes/vault/ || echo "Permission change failed, continuing..."
              chmod 755 /share/VMs/kubernetes/vault/ || echo "Chmod failed, continuing..."
              
              # Install vault CLI and GPG
              apk add --no-cache gnupg jq curl unzip
              
              # Install vault CLI
              curl -sL https://releases.hashicorp.com/vault/1.17.2/vault_1.17.2_linux_amd64.zip -o /tmp/vault.zip
              unzip -q /tmp/vault.zip -d /usr/local/bin/
              chmod +x /usr/local/bin/vault
              
              echo "🚀 Initializing Vault..."
              
              # Configuration
              VAULT_DIR="/share/VMs/kubernetes/vault"
              GPG_RECIPIENT="admin@daddyshome.fr"
              export VAULT_ADDR="http://vault-vault-nas.vault.svc.cluster.local:8200"
              
              # Wait for Vault to be ready
              echo "⏳ Waiting for Vault to be ready..."
              until vault status >/dev/null 2>&1; do
                echo "Waiting for Vault..."
                sleep 5
              done
              
              # Initialize Vault
              echo "🔐 Initializing Vault with single key..."
              INIT_OUTPUT=$(vault operator init -key-shares=1 -key-threshold=1 -format=json)
              
              # Extract keys from init output
              UNSEAL_KEY=$(echo "$INIT_OUTPUT" | jq -r '.unseal_keys_b64[0]')
              ROOT_TOKEN=$(echo "$INIT_OUTPUT" | jq -r '.root_token')
              
              # Save keys temporarily
              echo "$UNSEAL_KEY" > "$VAULT_DIR/unseal-key.txt"
              echo "$ROOT_TOKEN" > "$VAULT_DIR/root-token.txt"
              
              echo "🔓 Unsealing Vault..."
              vault operator unseal "$UNSEAL_KEY"
              
              # Generate GPG key (no passphrase)
              printf '%%echo Generating homelab vault key\nKey-Type: RSA\nKey-Length: 2048\nSubkey-Type: RSA\nSubkey-Length: 2048\nName-Real: Homelab Vault Admin\nName-Email: admin@daddyshome.fr\nExpire-Date: 2y\n%%no-protection\n%%commit\n%%echo GPG key generation complete\n' > /tmp/gpg-batch
              
              gpg --batch --generate-key /tmp/gpg-batch
              rm -f /tmp/gpg-batch
              
              # Encrypt keys
              echo "$UNSEAL_KEY" | gpg --trust-model always \
                --cipher-algo AES256 \
                --recipient "$GPG_RECIPIENT" \
                --encrypt --armor \
                --output "$VAULT_DIR/unseal-keys.txt.gpg"
              
              echo "$ROOT_TOKEN" | gpg --trust-model always \
                --cipher-algo AES256 \
                --recipient "$GPG_RECIPIENT" \
                --encrypt --armor \
                --output "$VAULT_DIR/root-token.txt.gpg"
              
              # Export GPG private key for auto-unseal
              gpg --export-secret-keys --armor "$GPG_RECIPIENT" > "$VAULT_DIR/gpg-private-key.asc"
              
              # Set permissions
              chmod 600 "$VAULT_DIR"/*.gpg "$VAULT_DIR/gpg-private-key.asc"
              
              # Create complete init JSON
              cat > "$VAULT_DIR/vault-init.json" <<EOF
              {
                "unseal_keys_b64": ["$UNSEAL_KEY"],
                "root_token": "$ROOT_TOKEN",
                "encrypted": true,
                "gpg_recipient": "$GPG_RECIPIENT"
              }
              EOF
              
              echo "✅ GPG encryption complete!"
              echo "📂 Files created:"
              ls -la "$VAULT_DIR"/
              
          env:
            - name: SKIP_CHOWN
              value: "true"
            - name: SKIP_SETCAP
              value: "true"
            - name: HOME
              value: /tmp
          volumeMounts:
            - name: vault-storage
              mountPath: /share/VMs
          securityContext:
            allowPrivilegeEscalation: true
            runAsUser: 0
            runAsGroup: 0
          resources:
            requests: {cpu: 100m, memory: 128Mi}
            limits: {cpu: 500m, memory: 256Mi}
      volumes:
        - name: vault-storage
          hostPath: {path: /share/VMs, type: Directory}