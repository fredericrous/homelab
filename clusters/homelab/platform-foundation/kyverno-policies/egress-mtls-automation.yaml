---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: egress-mtls-automation
  annotations:
    policies.kyverno.io/title: Automatic Egress mTLS Setup
    policies.kyverno.io/category: Security, Networking
    policies.kyverno.io/subject: Service, ServiceEntry, Certificate, DestinationRule, AuthorizationPolicy, VirtualService
    policies.kyverno.io/description: >-
      Automatically generates Istio service mesh egress configuration with mTLS for Services
      annotated with 'egress.mesh/mtls: "true"'. Creates ServiceEntry, Certificate, 
      DestinationRule, AuthorizationPolicy, and VirtualService resources.
spec:
  validationFailureAction: Enforce
  background: true
  rules:

    # Validate: must be ExternalName + mtls=true
    - name: validate-externalname-and-mtls
      match: 
        any: 
        - resources: 
            kinds: ["Service"]
      preconditions:
        all:
          - key: "{{ request.object.spec.type || '' }}"
            operator: Equals
            value: "ExternalName"
          - key: "{{ request.object.metadata.annotations.\"egress.mesh/mtls\" || '' }}"
            operator: Equals
            value: "true"
      validate:
        message: "Service must be ExternalName and annotated egress.mesh/mtls=true."
        pattern:
          spec:
            type: ExternalName
            externalName: "?*"  # Must have a non-empty externalName
          metadata:
            annotations:
              egress.mesh/mtls: "true"

    # Generate: ServiceEntry (port fixed to 443)
    - name: generate-serviceentry
      match: 
        any: 
        - resources: 
            kinds: ["Service"]
      preconditions:
        all:
          - key: "{{ request.operation }}"
            operator: In
            value: ["CREATE","UPDATE"]
          - key: "{{ request.object.spec.type || '' }}"
            operator: Equals
            value: "ExternalName"
          - key: "{{ request.object.metadata.annotations.\"egress.mesh/mtls\" || '' }}"
            operator: Equals
            value: "true"
          # Validation: don't allow dangerous hosts
          - key: "{{ request.object.spec.externalName }}"
            operator: AllNotIn
            value: ["localhost", "127.0.0.1", "*.local", "kubernetes.default", "kubernetes.default.svc", "kubernetes.default.svc.cluster.local"]
      generate:
        apiVersion: networking.istio.io/v1beta1
        kind: ServiceEntry
        namespace: istio-system
        name: "ext-{{ request.object.metadata.namespace }}-{{ request.object.metadata.name }}"
        synchronize: true
        data:
          apiVersion: networking.istio.io/v1beta1
          kind: ServiceEntry
          metadata:
            name: "ext-{{ request.object.metadata.namespace }}-{{ request.object.metadata.name }}"
            namespace: istio-system
            labels:
              app.kubernetes.io/managed-by: kyverno-egress-policy
              egress.mesh/source-service: "{{ request.object.metadata.name }}"
              egress.mesh/source-namespace: "{{ request.object.metadata.namespace }}"
          spec:
            hosts:
              - "{{ request.object.spec.externalName }}"
            location: MESH_EXTERNAL
            resolution: DNS
            ports:
              - number: 443
                name: tls
                protocol: TLS

    # Generate: Certificate -> SDS Secret (credentialName = egress-<ns>-<svc>)
    - name: generate-certificate
      match: 
        any: 
        - resources: 
            kinds: ["Service"]
      preconditions:
        all:
          - key: "{{ request.object.spec.type || '' }}"
            operator: Equals
            value: "ExternalName"
          - key: "{{ request.object.metadata.annotations.\"egress.mesh/mtls\" || '' }}"
            operator: Equals
            value: "true"
      generate:
        apiVersion: cert-manager.io/v1
        kind: Certificate
        namespace: istio-system
        name: "egress-{{ request.object.metadata.namespace }}-{{ request.object.metadata.name }}"
        synchronize: true
        data:
          apiVersion: cert-manager.io/v1
          kind: Certificate
          metadata:
            name: "egress-{{ request.object.metadata.namespace }}-{{ request.object.metadata.name }}"
            namespace: istio-system
            labels:
              app.kubernetes.io/managed-by: kyverno-egress-policy
              egress.mesh/source-service: "{{ request.object.metadata.name }}"
              egress.mesh/source-namespace: "{{ request.object.metadata.namespace }}"
          spec:
            secretName: "egress-{{ request.object.metadata.namespace }}-{{ request.object.metadata.name }}"
            secretTemplate:
              labels:
                istio.io/key-and-cert: "true"
                app.kubernetes.io/managed-by: kyverno-egress-policy
                egress.mesh/source-service: "{{ request.object.metadata.name }}"
                egress.mesh/source-namespace: "{{ request.object.metadata.namespace }}"
            commonName: "egress-{{ request.object.metadata.namespace }}-{{ request.object.metadata.name }}"
            dnsNames:
              - "egress-{{ request.object.metadata.namespace }}-{{ request.object.metadata.name }}"
            issuerRef:
              kind: ClusterIssuer
              name: egress-vault-issuer
            privateKey:
              algorithm: RSA
              size: 2048
            usages: ["client auth"]

    # Generate: DestinationRule with MUTUAL and derived credentialName
    - name: generate-destinationrule
      match: 
        any: 
        - resources: 
            kinds: ["Service"]
      preconditions:
        all:
          - key: "{{ request.object.spec.type || '' }}"
            operator: Equals
            value: "ExternalName"
          - key: "{{ request.object.metadata.annotations.\"egress.mesh/mtls\" || '' }}"
            operator: Equals
            value: "true"
      generate:
        apiVersion: networking.istio.io/v1beta1
        kind: DestinationRule
        namespace: istio-system
        name: "ext-{{ request.object.metadata.namespace }}-{{ request.object.metadata.name }}"
        synchronize: true
        data:
          apiVersion: networking.istio.io/v1beta1
          kind: DestinationRule
          metadata:
            name: "ext-{{ request.object.metadata.namespace }}-{{ request.object.metadata.name }}"
            namespace: istio-system
            labels:
              app.kubernetes.io/managed-by: kyverno-egress-policy
              egress.mesh/source-service: "{{ request.object.metadata.name }}"
              egress.mesh/source-namespace: "{{ request.object.metadata.namespace }}"
          spec:
            host: "{{ request.object.spec.externalName }}"
            trafficPolicy:
              tls:
                mode: MUTUAL
                credentialName: "egress-{{ request.object.metadata.namespace }}-{{ request.object.metadata.name }}"

    # Generate: AuthorizationPolicy (allow only caller namespace)
    - name: generate-authzpolicy
      match: 
        any: 
        - resources: 
            kinds: ["Service"]
      preconditions:
        all:
          - key: "{{ request.object.spec.type || '' }}"
            operator: Equals
            value: "ExternalName"
          - key: "{{ request.object.metadata.annotations.\"egress.mesh/mtls\" || '' }}"
            operator: Equals
            value: "true"
      generate:
        apiVersion: security.istio.io/v1beta1
        kind: AuthorizationPolicy
        namespace: istio-system
        name: "allow-{{ request.object.metadata.namespace }}-{{ request.object.metadata.name }}"
        synchronize: true
        data:
          apiVersion: security.istio.io/v1beta1
          kind: AuthorizationPolicy
          metadata:
            name: "allow-{{ request.object.metadata.namespace }}-{{ request.object.metadata.name }}"
            namespace: istio-system
            labels:
              app.kubernetes.io/managed-by: kyverno-egress-policy
              egress.mesh/source-service: "{{ request.object.metadata.name }}"
              egress.mesh/source-namespace: "{{ request.object.metadata.namespace }}"
          spec:
            selector:
              matchLabels:
                istio: egressgateway
            action: ALLOW
            rules:
              - from:
                  - source:
                      principals:
                        - "cluster.local/ns/{{ request.object.metadata.namespace }}/sa/*"
                to:
                  - operation:
                      hosts: ["{{ request.object.spec.externalName }}"]
                      ports: ["443"]

    # Generate: VirtualService (sidecars -> egress GW -> external host)
    - name: generate-virtualservice
      match: 
        any: 
        - resources: 
            kinds: ["Service"]
      preconditions:
        all:
          - key: "{{ request.object.spec.type || '' }}"
            operator: Equals
            value: "ExternalName"
          - key: "{{ request.object.metadata.annotations.\"egress.mesh/mtls\" || '' }}"
            operator: Equals
            value: "true"
      generate:
        apiVersion: networking.istio.io/v1beta1
        kind: VirtualService
        namespace: istio-system
        name: "ext-{{ request.object.metadata.namespace }}-{{ request.object.metadata.name }}-via-eg"
        synchronize: true
        data:
          apiVersion: networking.istio.io/v1beta1
          kind: VirtualService
          metadata:
            name: "ext-{{ request.object.metadata.namespace }}-{{ request.object.metadata.name }}-via-eg"
            namespace: istio-system
            labels:
              app.kubernetes.io/managed-by: kyverno-egress-policy
              egress.mesh/source-service: "{{ request.object.metadata.name }}"
              egress.mesh/source-namespace: "{{ request.object.metadata.namespace }}"
          spec:
            hosts: ["{{ request.object.spec.externalName }}"]
            gateways:
              - "mesh"
              - "istio-system/istio-egressgateway"
            tcp:
              - match:
                  - gateways: ["mesh"]
                    port: 443
                route:
                  - destination:
                      host: istio-egressgateway.istio-system.svc.cluster.local
                      port: 
                        number: 443
              - match:
                  - gateways: ["istio-system/istio-egressgateway"]
                    port: 443
                route:
                  - destination:
                      host: "{{ request.object.spec.externalName }}"
                      port: 
                        number: 443