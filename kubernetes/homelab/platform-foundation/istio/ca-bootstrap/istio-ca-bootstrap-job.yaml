---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-ca-bootstrap
  namespace: istio-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: istio-ca-bootstrap
  namespace: istio-system
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "create", "update", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: istio-ca-bootstrap
  namespace: istio-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: istio-ca-bootstrap
subjects:
  - kind: ServiceAccount
    name: istio-ca-bootstrap
    namespace: istio-system

---
apiVersion: batch/v1
kind: Job
metadata:
  name: istio-ca-bootstrap
  namespace: istio-system
spec:
  ttlSecondsAfterFinished: 300
  backoffLimit: 1
  template:
    spec:
      serviceAccountName: istio-ca-bootstrap
      restartPolicy: Never
      containers:
        - name: ca-bootstrap
          image: bitnami/kubectl:1.29
          command: ["/bin/bash", "-c"]
          args:
            - |
              set -euo pipefail

              # Log helper
              log() {
                echo "$(date -u +%Y-%m-%dT%H:%M:%SZ) - $1"
              }

              # Check if cacerts already exists
              if kubectl get secret cacerts -n istio-system >/dev/null 2>&1; then
                log "cacerts secret already exists, checking validity..."
                
                # Verify it has all required keys
                MISSING_KEYS=""
                for key in root-cert.pem cert-chain.pem key.pem; do
                  if ! kubectl get secret cacerts -n istio-system -o jsonpath="{.data.$key}" | grep -q .; then
                    MISSING_KEYS="$MISSING_KEYS $key"
                  fi
                done
                
                if [ -z "$MISSING_KEYS" ]; then
                  log "cacerts secret is valid, skipping generation"
                  exit 0
                else
                  log "cacerts secret is missing keys:$MISSING_KEYS, regenerating..."
                  kubectl delete secret cacerts -n istio-system
                fi
              fi

              log "Generating Istio root CA"
              mkdir -p /tmp/istio-ca
              cd /tmp/istio-ca

              openssl genrsa -out key.pem 4096

              cat >root-cert.conf <<'EOF'
              [req]
              distinguished_name = req_distinguished_name
              x509_extensions = v3_ca
              prompt = no

              [req_distinguished_name]
              C  = FR
              ST = France
              L  = Paris
              O  = Homelab Mesh
              CN = Homelab Istio Root CA

              [v3_ca]
              subjectKeyIdentifier = hash
              authorityKeyIdentifier = keyid:always,issuer
              basicConstraints = critical, CA:true
              keyUsage = critical, digitalSignature, cRLSign, keyCertSign
              EOF

              openssl req -new -x509 -key key.pem -out root-cert.pem \
                -days 3650 -config root-cert.conf

              # For a self-signed root CA, cert-chain is the same as root-cert
              cp root-cert.pem cert-chain.pem

              log "Creating cacerts secret in istio-system namespace"
              kubectl create secret generic cacerts \
                --from-file=root-cert.pem \
                --from-file=cert-chain.pem \
                --from-file=key.pem \
                --namespace=istio-system

              log "CA generation completed successfully"
              
              # Store fingerprint for verification
              FINGERPRINT=$(openssl x509 -in root-cert.pem -fingerprint -noout)
              log "Root CA fingerprint: $FINGERPRINT"
              
              # Clean up
              cd /
              rm -rf /tmp/istio-ca
