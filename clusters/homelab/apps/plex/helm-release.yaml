---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: plex-media-server
  namespace: plex
spec:
  interval: 30m
  timeout: 15m
  chart:
    spec:
      chart: plex-media-server
      version: "1.1.2"
      sourceRef:
        kind: HelmRepository
        name: plex-media-server
        namespace: plex
      interval: 12h
  
  values:
    # Image configuration
    image:
      repository: plexinc/pms-docker
      tag: "latest"
      pullPolicy: IfNotPresent
    
    # Service Account
    serviceAccount:
      create: false
      name: plex
    
    # Init container to fetch fresh claim token
    initContainers:
      - name: fetch-claim-token
        image: alpine/kubectl:latest
        env:
          - name: X_PLEX_TOKEN
            valueFrom:
              secretKeyRef:
                name: cluster-vars
                key: X_PLEX_TOKEN
        command: ["/bin/sh", "-c"]
        args:
          - |
            set -euo pipefail
            apk add --no-cache curl
            
            echo "Fetching fresh claim token from Plex.tv..."
            CLAIM_JSON="$(curl -fsSL "https://plex.tv/api/claim/token?X-Plex-Token=${X_PLEX_TOKEN}")"
            # Works for both XML and JSON responses; grab the token value
            CLAIM="$(printf "%s" "$CLAIM_JSON" | sed -n 's/.*"token":"\([^"]*\)".*/\1/p')"
            if [ -z "$CLAIM" ]; then
              # try XML fallback
              CLAIM="$(printf "%s" "$CLAIM_JSON" | sed -n 's/.*token="\([^"]*\)".*/\1/p')"
            fi
            [ -n "$CLAIM" ] || { echo "Could not parse claim token"; exit 1; }
            
            echo "Successfully obtained claim token: ${CLAIM:0:10}..."

            # Create/replace a Secret 'plex-claim' with the fresh token
            cat <<EOF | kubectl apply -f -
            apiVersion: v1
            kind: Secret
            metadata:
              name: plex-claim
              namespace: plex
            type: Opaque
            stringData:
              PLEX_CLAIM: "$CLAIM"
            EOF
            
            echo "âœ… Claim token secret created successfully"
    
    # Environment variables
    env:
      TZ:
        valueFrom:
          secretKeyRef:
            name: plex-config
            key: timezone
      PLEX_CLAIM:
        valueFrom:
          secretKeyRef:
            name: plex-claim
            key: PLEX_CLAIM
      ADVERTISE_IP: "https://plex.daddyshome.fr/"
      # GPU support
      NVIDIA_VISIBLE_DEVICES: "all"
      NVIDIA_DRIVER_CAPABILITIES: "compute,video,utility"
    
    # Security context for GPU access
    securityContext:
      privileged: true
    
    # Resource limits with GPU
    resources:
      limits:
        memory: 4Gi
        nvidia.com/gpu: 1
      requests:
        memory: 2Gi
        cpu: 1000m
    
    # Storage configuration
    persistence:
      config:
        enabled: true
        existingClaim: plex-config
        mountPath: /config
      media:
        enabled: true
        existingClaim: plex-media
        mountPath: /media
      # Transcode on tmpfs for better performance
      transcode:
        enabled: true
        type: emptyDir
        medium: Memory
        sizeLimit: 4Gi
        mountPath: /transcode
    
    # Service configuration
    service:
      type: ClusterIP
      port: 32400
      annotations:
        istio.io/ingress-mtls: "true"
    
    
    # Runtime class for GPU support
    runtimeClassName: nvidia
    
    # Probes
    livenessProbe:
      httpGet:
        path: /identity
        port: 32400
      initialDelaySeconds: 30
      periodSeconds: 30
      timeoutSeconds: 10
      failureThreshold: 3
    
    readinessProbe:
      httpGet:
        path: /identity
        port: 32400
      initialDelaySeconds: 15
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    
    # Node selector for GPU node
    nodeSelector:
      gpu: nvidia-rtx-4060
    
    # Tolerations for GPU node
    tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
    
    # Additional annotations for backup
    podAnnotations:
      backup.velero.io/backup-volumes: config