---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-ca-vault-backup
  namespace: istio-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: istio-ca-vault-backup
  namespace: istio-system
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]
    resourceNames: ["cacerts"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: istio-ca-vault-backup
  namespace: istio-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: istio-ca-vault-backup
subjects:
  - kind: ServiceAccount
    name: istio-ca-vault-backup
    namespace: istio-system
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: istio-ca-vault-backup
  namespace: istio-system
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 86400  # Clean up after 24 hours
      template:
        metadata:
          annotations:
            sidecar.istio.io/inject: "false"
        spec:
          serviceAccountName: istio-ca-vault-backup
          restartPolicy: Never
          containers:
            - name: vault-backup
              image: alpine/k8s:1.29.11
              env:
                - name: VAULT_ADDR
                  value: "http://vault-vault.vault.svc.cluster.local:8200"
                - name: VAULT_ROLE
                  value: "istio-ca-bootstrap"
              command: ["/bin/sh", "-c"]
              args:
                - |
                  set -euo pipefail

                  # Install required tools
                  apk add --no-cache curl jq

                  # Log helper
                  log() {
                    echo "$(date -u +%Y-%m-%dT%H:%M:%SZ) - $1"
                  }

                  # Check if Vault is available
                  log "Checking Vault availability..."
                  if ! curl -sSf --max-time 5 "$VAULT_ADDR/v1/sys/health" >/dev/null 2>&1; then
                    log "Vault is not available, skipping backup"
                    exit 0
                  fi

                  # Get the cacerts secret
                  log "Reading cacerts secret..."
                  if ! kubectl get secret cacerts -n istio-system >/dev/null 2>&1; then
                    log "cacerts secret not found, nothing to backup"
                    exit 0
                  fi

                  # Extract certificates
                  ROOT_CERT=$(kubectl get secret cacerts -n istio-system -o jsonpath='{.data.root-cert\.pem}' | base64 -d)
                  CERT_CHAIN=$(kubectl get secret cacerts -n istio-system -o jsonpath='{.data.cert-chain\.pem}' | base64 -d)
                  KEY_PEM=$(kubectl get secret cacerts -n istio-system -o jsonpath='{.data.key\.pem}' | base64 -d)

                  # Try to authenticate to Vault
                  log "Authenticating with Vault..."
                  SA_JWT=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
                  VAULT_TOKEN=$(curl -sSf --request POST \
                    --data "{\"role\":\"$VAULT_ROLE\",\"jwt\":\"$SA_JWT\"}" \
                    "$VAULT_ADDR/v1/auth/kubernetes/login" 2>/dev/null | jq -r '.auth.client_token // empty')

                  if [ -z "$VAULT_TOKEN" ]; then
                    log "Failed to authenticate to Vault, skipping backup"
                    exit 0
                  fi

                  export VAULT_TOKEN

                  # Check if CA already exists in Vault
                  if curl -sSf -H "X-Vault-Token: $VAULT_TOKEN" \
                      "$VAULT_ADDR/v1/secret/data/istio/ca" >/dev/null 2>&1; then
                    log "CA already exists in Vault"
                    
                    # Compare fingerprints
                    VAULT_ROOT_CERT=$(curl -sSf -H "X-Vault-Token: $VAULT_TOKEN" \
                      "$VAULT_ADDR/v1/secret/data/istio/ca" | jq -r '.data.data."root-cert.pem"')
                    
                    SECRET_FP=$(echo "$ROOT_CERT" | openssl x509 -fingerprint -noout)
                    VAULT_FP=$(echo "$VAULT_ROOT_CERT" | openssl x509 -fingerprint -noout)
                    
                    if [ "$SECRET_FP" = "$VAULT_FP" ]; then
                      log "CA in Vault matches current CA, no update needed"
                      exit 0
                    else
                      log "CA in Vault differs from current CA, updating..."
                    fi
                  fi

                  # Store in Vault
                  log "Backing up CA to Vault..."
                  VAULT_PAYLOAD=$(jq -n \
                    --arg rootcert "$ROOT_CERT" \
                    --arg certchain "$CERT_CHAIN" \
                    --arg key "$KEY_PEM" \
                    '{
                      "data": {
                        "root-cert.pem": $rootcert,
                        "cert-chain.pem": $certchain,
                        "key.pem": $key,
                        "backed-up-at": (now | strftime("%Y-%m-%dT%H:%M:%SZ"))
                      }
                    }')
                  
                  if curl -sSf -H "X-Vault-Token: $VAULT_TOKEN" \
                      --request POST \
                      --data "$VAULT_PAYLOAD" \
                      "$VAULT_ADDR/v1/secret/data/istio/ca"; then
                    log "CA successfully backed up to Vault"
                  else
                    log "Failed to backup CA to Vault"
                    exit 1
                  fi