apiVersion: batch/v1
kind: Job
metadata:
  name: vault-bootstrap
  namespace: vault
spec:
  backoffLimit: 3
  template:
    spec:
      restartPolicy: OnFailure
      containers:
        - name: bootstrap
          image: hashicorp/vault:1.17.2
          command: ["/bin/sh", "-ec"]
          args:
            - |
              set -euo pipefail
              
              # Fix permissions first
              echo "🔧 Fixing permissions on vault directory..."
              chown -R 100:1000 /share/VMs/kubernetes/vault/ || echo "Permission change failed, continuing..."
              chmod 755 /share/VMs/kubernetes/vault/ || echo "Chmod failed, continuing..."
              
              # Install GPG
              apk add --no-cache gnupg jq
              
              echo "🔐 Creating GPG key and encrypting existing Vault keys..."
              
              # Configuration
              VAULT_DIR="/share/VMs/kubernetes/vault"
              GPG_RECIPIENT="admin@daddyshome.fr"
              
              # Read existing keys
              UNSEAL_KEY=$(cat $VAULT_DIR/unseal-key.txt)
              ROOT_TOKEN=$(cat $VAULT_DIR/root-token.txt)
              
              # Generate GPG key
              cat > /tmp/gpg-batch <<EOF
              %echo Generating homelab vault key
              Key-Type: RSA
              Key-Length: 2048
              Subkey-Type: RSA
              Subkey-Length: 2048
              Name-Real: Homelab Vault Admin
              Name-Email: $GPG_RECIPIENT
              Expire-Date: 2y
              Passphrase: 
              %commit
              %echo GPG key generation complete
              EOF
              
              gpg --batch --generate-key /tmp/gpg-batch
              rm -f /tmp/gpg-batch
              
              # Encrypt keys
              echo "$UNSEAL_KEY" | gpg --trust-model always \
                --cipher-algo AES256 \
                --recipient "$GPG_RECIPIENT" \
                --encrypt --armor \
                --output "$VAULT_DIR/unseal-keys.txt.gpg"
              
              echo "$ROOT_TOKEN" | gpg --trust-model always \
                --cipher-algo AES256 \
                --recipient "$GPG_RECIPIENT" \
                --encrypt --armor \
                --output "$VAULT_DIR/root-token.txt.gpg"
              
              # Export GPG private key for auto-unseal
              gpg --export-secret-keys --armor "$GPG_RECIPIENT" > "$VAULT_DIR/gpg-private-key.asc"
              
              # Set permissions
              chmod 600 "$VAULT_DIR"/*.gpg "$VAULT_DIR/gpg-private-key.asc"
              
              # Create complete init JSON
              cat > "$VAULT_DIR/vault-init.json" <<EOF
              {
                "unseal_keys_b64": ["$UNSEAL_KEY"],
                "root_token": "$ROOT_TOKEN",
                "encrypted": true,
                "gpg_recipient": "$GPG_RECIPIENT"
              }
              EOF
              
              echo "✅ GPG encryption complete!"
              echo "📂 Files created:"
              ls -la "$VAULT_DIR"/
              
          env:
            - name: SKIP_CHOWN
              value: "true"
            - name: SKIP_SETCAP
              value: "true"
            - name: HOME
              value: /tmp
          volumeMounts:
            - name: vault-storage
              mountPath: /share/VMs
          securityContext:
            allowPrivilegeEscalation: true
            runAsUser: 0
            runAsGroup: 0
          resources:
            requests: {cpu: 100m, memory: 128Mi}
            limits: {cpu: 500m, memory: 256Mi}
      volumes:
        - name: vault-storage
          hostPath: {path: /share/VMs, type: Directory}