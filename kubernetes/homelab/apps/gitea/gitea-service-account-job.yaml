apiVersion: batch/v1
kind: Job
metadata:
  name: lldap-create-gitea-service-account
  namespace: gitea
spec:
  ttlSecondsAfterFinished: 300  # Clean up job after 5 minutes
  template:
    spec:
      serviceAccountName: gitea
      restartPolicy: OnFailure
      containers:
      - name: create-service-account
        image: alpine/curl:latest
        command:
        - /bin/sh
        - -c
        - |
          set -e
          
          echo "Creating Gitea service account in LLDAP..."
          
          # Get LLDAP admin credentials
          LLDAP_ADMIN_USERNAME="admin"
          LLDAP_ADMIN_PASSWORD=$(cat /var/secrets/lldap/ldap_user_pass)
          LLDAP_JWT_SECRET=$(cat /var/secrets/lldap/jwt_secret)
          
          # LLDAP API endpoint
          LLDAP_API_URL="http://lldap.lldap.svc.cluster.local:17170"
          
          echo "Getting JWT token from LLDAP..."
          
          # Login to LLDAP to get JWT token
          JWT_TOKEN=$(curl -s -X POST "$LLDAP_API_URL/auth/simple/login" \
            -H "Content-Type: application/json" \
            -d "{\"username\":\"$LLDAP_ADMIN_USERNAME\",\"password\":\"$LLDAP_ADMIN_PASSWORD\"}" \
            | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
          
          if [ -z "$JWT_TOKEN" ]; then
            echo "Failed to get JWT token from LLDAP"
            exit 1
          fi
          
          echo "Successfully obtained JWT token"
          
          # Check if gitea-service user already exists
          echo "Checking if gitea-service user already exists..."
          
          EXISTING_USER=$(curl -s -X POST "$LLDAP_API_URL/api/graphql" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $JWT_TOKEN" \
            -d '{"query":"query { users(filters: {userId: {eq: \"gitea-service\"}}) { id userId displayName email } }"}' \
            | grep -o '"users":\[[^]]*\]')
          
          if echo "$EXISTING_USER" | grep -q "gitea-service"; then
            echo "✅ User gitea-service already exists"
            exit 0
          fi
          
          echo "Creating gitea-service user..."
          
          # Create the service account user
          CREATE_RESPONSE=$(curl -s -X POST "$LLDAP_API_URL/api/graphql" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $JWT_TOKEN" \
            -d '{
              "query": "mutation CreateUser($user: CreateUserInput!) { createUser(user: $user) { id userId } }",
              "variables": {
                "user": {
                  "userId": "gitea-service",
                  "displayName": "Gitea Service Account",
                  "firstName": "Gitea",
                  "lastName": "Service",
                  "email": "gitea-service@daddyshome.fr"
                }
              }
            }')
          
          echo "Create user response: $CREATE_RESPONSE"
          
          # Check if user creation was successful
          if echo "$CREATE_RESPONSE" | grep -q '"createUser"'; then
            echo "✅ Successfully created gitea-service user"
          else
            echo "❌ Failed to create gitea-service user"
            echo "Response: $CREATE_RESPONSE"
            exit 1
          fi
          
          # Set password for the service account
          echo "Setting password for gitea-service user..."
          
          # Generate a strong password (we'll also store this in Vault)
          SERVICE_ACCOUNT_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/")
          
          PASSWORD_RESPONSE=$(curl -s -X POST "$LLDAP_API_URL/api/graphql" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $JWT_TOKEN" \
            -d "{
              \"query\": \"mutation UpdateUserPassword(\$userId: String!, \$password: String!) { updateUserPassword(userId: \$userId, password: \$password) { ok } }\",
              \"variables\": {
                \"userId\": \"gitea-service\",
                \"password\": \"$SERVICE_ACCOUNT_PASSWORD\"
              }
            }")
          
          echo "Password update response: $PASSWORD_RESPONSE"
          
          if echo "$PASSWORD_RESPONSE" | grep -q '"ok":true'; then
            echo "✅ Successfully set password for gitea-service user"
          else
            echo "❌ Failed to set password for gitea-service user"
            exit 1
          fi
          
          # Add user to lldap_admin group for administrative privileges
          echo "Adding gitea-service to lldap_admin group..."
          
          GROUP_RESPONSE=$(curl -s -X POST "$LLDAP_API_URL/api/graphql" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $JWT_TOKEN" \
            -d '{
              "query": "mutation AddUserToGroup($userId: String!, $groupId: Int!) { addUserToGroup(userId: $userId, groupId: $groupId) { ok } }",
              "variables": {
                "userId": "gitea-service",
                "groupId": 1
              }
            }')
          
          echo "Group assignment response: $GROUP_RESPONSE"
          
          if echo "$GROUP_RESPONSE" | grep -q '"ok":true'; then
            echo "✅ Successfully added gitea-service to lldap_admin group"
          else
            echo "⚠️  Failed to add to admin group, but user creation successful"
          fi
          
          # Store credentials in a ConfigMap for reference (password will be in Vault)
          echo "Creating reference configmap..."
          kubectl create configmap gitea-lldap-service-account \
            --from-literal=username="gitea-service" \
            --from-literal=dn="uid=gitea-service,ou=people,dc=daddyshome,dc=fr" \
            --from-literal=email="gitea-service@daddyshome.fr" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          echo "✅ Gitea service account created successfully!"
          echo "Username: gitea-service"
          echo "DN: uid=gitea-service,ou=people,dc=daddyshome,dc=fr"
          echo "Email: gitea-service@daddyshome.fr"
          echo "Note: Password is generated and should be stored in Vault"
          
        volumeMounts:
        - name: lldap-secrets
          mountPath: /var/secrets/lldap
          readOnly: true
      volumes:
      - name: lldap-secrets
        secret:
          secretName: lldap-secrets