apiVersion: v1
kind: ServiceAccount
metadata:
  name: minio-bucket-setup
  namespace: minio
---
apiVersion: batch/v1
kind: Job
metadata:
  name: minio-bucket-setup
  namespace: minio
  annotations:
    # This job depends on MinIO StatefulSet being ready
    kustomize.toolkit.fluxcd.io/depends-on: minio/StatefulSet/minio
spec:
  ttlSecondsAfterFinished: 300  # Clean up job after 5 minutes
  backoffLimit: 3
  activeDeadlineSeconds: 900  # Increased to 15 minutes to accommodate credential wait
  template:
    spec:
      restartPolicy: OnFailure
      serviceAccountName: minio-bucket-setup
      containers:
      - name: init-buckets
        image: minio/mc:latest
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "Starting MinIO bucket setup at $(date)"
          echo "MinIO endpoint: http://minio:9000"
          
          # Wait for MinIO to be ready with timeout
          echo "Waiting for MinIO to be ready..."
          RETRY_COUNT=0
          MAX_RETRIES=120  # 10 minutes total (5s * 120)
          
          # First wait for MinIO service to be responsive
          echo "Checking MinIO service availability..."
          until mc alias set test-connection http://minio:9000 "$MINIO_ROOT_USER" "$MINIO_ROOT_PASSWORD" >/dev/null 2>&1; do
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -ge 60 ]; then  # 5 minutes for basic connectivity
              echo "ERROR: MinIO service not responding after 5 minutes"
              exit 1
            fi
            echo "Attempt $RETRY_COUNT/60: Waiting for MinIO service..."
            sleep 5
          done
          
          echo "MinIO service is responding and credentials are working!"
          
          # Clean up test connection and set proper alias
          mc alias remove test-connection 2>/dev/null || true
          mc alias set myminio http://minio:9000 "$MINIO_ROOT_USER" "$MINIO_ROOT_PASSWORD"
          
          echo "Successfully connected to MinIO"
          
          # List existing buckets
          echo "Current buckets:"
          mc ls myminio/ || echo "No buckets found"
          
          # Create models bucket if it doesn't exist
          if ! mc ls myminio/models 2>/dev/null; then
            echo "Creating models bucket..."
            mc mb myminio/models
            echo "Bucket 'models' created successfully"
          else
            echo "Bucket 'models' already exists"
          fi
          
          # Set public download policy for models bucket
          echo "Setting download policy for models bucket..."
          mc anonymous set download myminio/models
          echo "Policy set successfully"
          
          # Verify final state
          echo "Final verification:"
          mc ls myminio/
          mc anonymous get myminio/models
          
          echo "MinIO bucket initialization completed successfully at $(date)"
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: rootUser
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: rootPassword