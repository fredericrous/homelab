# Generate three different passwords for LLDAP
---
apiVersion: generators.external-secrets.io/v1alpha1
kind: Password
metadata:
  name: lldap-jwt-password
  namespace: lldap
spec:
  length: 32
  digits: 5
  symbols: 0  # JWT secret should be alphanumeric
  noUpper: false
  allowRepeat: true
---
apiVersion: generators.external-secrets.io/v1alpha1
kind: Password
metadata:
  name: lldap-ldap-password
  namespace: lldap
spec:
  length: 32
  digits: 5
  symbols: 5
  symbolCharacters: "-_"
  noUpper: false
  allowRepeat: true
---
apiVersion: generators.external-secrets.io/v1alpha1
kind: Password
metadata:
  name: lldap-db-password
  namespace: lldap
spec:
  length: 32
  digits: 5
  symbols: 5
  symbolCharacters: "-_"
  noUpper: false
  allowRepeat: true
---
# Generate all passwords and combine them into a single secret
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: lldap-generated-passwords
  namespace: lldap
spec:
  refreshInterval: "0"  # Generate once and never refresh
  target:
    name: lldap-generated-passwords
    creationPolicy: Owner
    template:
      engineVersion: v2
      type: Opaque
      data:
        # Store as base64 for LLDAP
        LLDAP_JWT_SECRET: "{{ .jwt_password | b64enc }}"
        LLDAP_LDAP_USER_PASS: "{{ .ldap_password | b64enc }}"
  dataFrom:
  # JWT password
  - sourceRef:
      generatorRef:
        apiVersion: generators.external-secrets.io/v1alpha1
        kind: Password
        name: lldap-jwt-password
    rewrite:
    - regexp:
        source: "password"
        target: "jwt_password"
  # LDAP password  
  - sourceRef:
      generatorRef:
        apiVersion: generators.external-secrets.io/v1alpha1
        kind: Password
        name: lldap-ldap-password
    rewrite:
    - regexp:
        source: "password"
        target: "ldap_password"
---
# Separate secret for database credentials (for CloudNativePG)
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: lldap-db-credentials-generator
  namespace: lldap
spec:
  refreshInterval: "0"  # Generate once
  target:
    name: lldap-db-credentials
    creationPolicy: Owner
    template:
      type: kubernetes.io/basic-auth
      metadata:
        annotations:
          # Allow reflection to postgres namespace
          reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
          reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: "postgres"
          reflector.v1.k8s.emberstack.com/reflection-auto-enabled: "true"
          reflector.v1.k8s.emberstack.com/reflection-auto-namespaces: "postgres"
      data:
        username: "lldap"
        password: "{{ .password }}"
  dataFrom:
  - sourceRef:
      generatorRef:
        apiVersion: generators.external-secrets.io/v1alpha1
        kind: Password
        name: lldap-db-password
---
# Push the generated secrets to Vault for compatibility
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: lldap-push-to-vault
  namespace: lldap
spec:
  refreshInterval: "1h"
  secretStoreRefs:
  - name: vault-backend
    kind: SecretStore
  selector:
    secret:
      name: lldap-generated-passwords
  data:
  # Push individual keys to the same Vault path
  - match:
      secretKey: LLDAP_JWT_SECRET
      remoteRef:
        remoteKey: lldap
        property: LLDAP_JWT_SECRET
  - match:
      secretKey: LLDAP_LDAP_USER_PASS
      remoteRef:
        remoteKey: lldap
        property: LLDAP_LDAP_USER_PASS