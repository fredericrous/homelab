---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-ca-generator
  namespace: istio-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: istio-ca-generator
  namespace: istio-system
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: istio-ca-generator
  namespace: istio-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: istio-ca-generator
subjects:
- kind: ServiceAccount
  name: istio-ca-generator
  namespace: istio-system
---
apiVersion: batch/v1
kind: Job
metadata:
  name: istio-ca-setup
  namespace: istio-system
  annotations:
    kustomize.toolkit.fluxcd.io/force: "true"
spec:
  ttlSecondsAfterFinished: 300  # Clean up job after 5 minutes
  template:
    spec:
      serviceAccountName: istio-ca-generator
      restartPolicy: Never
      containers:
      - name: ca-generator
        image: alpine/openssl:latest
        command: ["/bin/sh", "-c"]
        env:
        - name: VAULT_ADDR
          value: "http://vault-vault.vault.svc.cluster.local:8200"
        - name: VAULT_TOKEN
          valueFrom:
            secretKeyRef:
              name: vault-admin-token
              key: token
              optional: true
        args:
        - |
          set -e
          
          # Install vault and required tools
          apk add --no-cache curl jq
          curl -fsSL https://releases.hashicorp.com/vault/1.17.2/vault_1.17.2_linux_amd64.zip -o vault.zip
          unzip vault.zip && mv vault /usr/local/bin/ && rm vault.zip
          
          # Wait for Vault to be ready
          echo "🔄 Waiting for Vault to be ready..."
          while ! vault status >/dev/null 2>&1; do
            echo "Vault not ready yet, waiting..."
            sleep 5
          done
          
          # Check if Istio CA already exists in Vault
          echo "🔍 Checking if Istio CA already exists..."
          if vault kv get secret/istio/ca/root-cert.pem >/dev/null 2>&1; then
            echo "✅ Istio CA already exists in Vault, skipping generation"
            exit 0
          fi
          
          echo "🔐 Generating new Istio root CA..."
          
          # Create working directory
          mkdir -p /tmp/istio-ca
          cd /tmp/istio-ca
          
          # Generate root CA key
          openssl genrsa -out root-key.pem 4096
          
          # Generate root CA certificate (10 years validity)
          cat > root-cert.conf <<EOF
          [req]
          distinguished_name = req_distinguished_name
          x509_extensions = v3_ca
          prompt = no
          
          [req_distinguished_name]
          C = FR
          ST = France
          L = Paris
          O = Homelab
          CN = Istio Root CA
          
          [v3_ca]
          subjectKeyIdentifier = hash
          authorityKeyIdentifier = keyid:always,issuer
          basicConstraints = critical, CA:true
          keyUsage = critical, digitalSignature, cRLSign, keyCertSign
          EOF
          
          openssl req -new -x509 -key root-key.pem -out root-cert.pem -days 3650 -config root-cert.conf
          
          # For Istio, cert-chain.pem is the same as root-cert.pem for a self-signed root
          cp root-cert.pem cert-chain.pem
          
          # Store in Vault
          echo "📦 Storing Istio CA in Vault..."
          vault kv put secret/istio/ca \
            root-cert.pem="$(cat root-cert.pem)" \
            cert-chain.pem="$(cat cert-chain.pem)" \
            root-key.pem="$(cat root-key.pem)"
          
          echo "✅ Istio CA successfully generated and stored in Vault"
          
          # Clean up
          cd /
          rm -rf /tmp/istio-ca
  backoffLimit: 3