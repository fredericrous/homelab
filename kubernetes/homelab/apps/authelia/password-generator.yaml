# Generate passwords for Authelia
---
apiVersion: generators.external-secrets.io/v1alpha1
kind: Password
metadata:
  name: authelia-jwt-password
  namespace: authelia
spec:
  length: 64
  digits: 10
  symbols: 0  # JWT secret should be alphanumeric
  noUpper: false
  allowRepeat: true
---
apiVersion: generators.external-secrets.io/v1alpha1
kind: Password
metadata:
  name: authelia-session-password
  namespace: authelia
spec:
  length: 64
  digits: 10
  symbols: 0  # Session secret should be alphanumeric
  noUpper: false
  allowRepeat: true
---
apiVersion: generators.external-secrets.io/v1alpha1
kind: Password
metadata:
  name: authelia-storage-key
  namespace: authelia
spec:
  length: 64
  digits: 10
  symbols: 0  # Storage encryption key should be alphanumeric
  noUpper: false
  allowRepeat: true
---
apiVersion: generators.external-secrets.io/v1alpha1
kind: Password
metadata:
  name: authelia-db-password
  namespace: authelia
spec:
  length: 32
  digits: 5
  symbols: 5
  symbolCharacters: "-_"
  noUpper: false
  allowRepeat: true
---
# Generate all Authelia secrets and combine them
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: authelia-generated-secrets
  namespace: authelia
spec:
  refreshInterval: "0"  # Generate once and never refresh
  target:
    name: authelia-generated-secrets
    creationPolicy: Owner
    template:
      engineVersion: v2
      type: Opaque
      data:
        # Authelia expects these in specific formats
        AUTHELIA_JWT_SECRET: "{{ .jwt_password }}"
        AUTHELIA_SESSION_SECRET: "{{ .session_password }}"
        AUTHELIA_STORAGE_ENCRYPTION_KEY: "{{ .storage_key }}"
  dataFrom:
  # JWT password
  - sourceRef:
      generatorRef:
        apiVersion: generators.external-secrets.io/v1alpha1
        kind: Password
        name: authelia-jwt-password
    rewrite:
    - regexp:
        source: "password"
        target: "jwt_password"
  # Session password  
  - sourceRef:
      generatorRef:
        apiVersion: generators.external-secrets.io/v1alpha1
        kind: Password
        name: authelia-session-password
    rewrite:
    - regexp:
        source: "password"
        target: "session_password"
  # Storage encryption key
  - sourceRef:
      generatorRef:
        apiVersion: generators.external-secrets.io/v1alpha1
        kind: Password
        name: authelia-storage-key
    rewrite:
    - regexp:
        source: "password"
        target: "storage_key"
---
# Separate secret for database credentials (for CloudNativePG)
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: authelia-db-credentials-generator
  namespace: authelia
spec:
  refreshInterval: "0"  # Generate once
  target:
    name: authelia-db-app
    creationPolicy: Owner
    template:
      type: kubernetes.io/basic-auth
      metadata:
        annotations:
          # Allow reflection to postgres namespace
          reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
          reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: "postgres"
          reflector.v1.k8s.emberstack.com/reflection-auto-enabled: "true"
          reflector.v1.k8s.emberstack.com/reflection-auto-namespaces: "postgres"
      data:
        username: "authelia"
        password: "{{ .password }}"
  dataFrom:
  - sourceRef:
      generatorRef:
        apiVersion: generators.external-secrets.io/v1alpha1
        kind: Password
        name: authelia-db-password
---
# Push the generated secrets to Vault for compatibility and backup
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: authelia-push-to-vault
  namespace: authelia
spec:
  refreshInterval: "1h"
  secretStoreRefs:
  - name: vault-backend
    kind: SecretStore
  selector:
    secret:
      name: authelia-generated-secrets
  data:
  # Push individual keys to Vault
  - match:
      secretKey: AUTHELIA_JWT_SECRET
      remoteRef:
        remoteKey: authelia
        property: JWT_SECRET
  - match:
      secretKey: AUTHELIA_SESSION_SECRET
      remoteRef:
        remoteKey: authelia
        property: SESSION_SECRET
  - match:
      secretKey: AUTHELIA_STORAGE_ENCRYPTION_KEY
      remoteRef:
        remoteKey: authelia
        property: STORAGE_ENCRYPTION_KEY
---
# Push database credentials to Vault
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: authelia-db-push-to-vault
  namespace: authelia
spec:
  refreshInterval: "1h"
  secretStoreRefs:
  - name: vault-backend
    kind: SecretStore
  selector:
    secret:
      name: authelia-db-app
  data:
  - match:
      secretKey: username
      remoteRef:
        remoteKey: authelia/postgres
        property: username
  - match:
      secretKey: password
      remoteRef:
        remoteKey: authelia/postgres
        property: password